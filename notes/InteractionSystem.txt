
// Add interaction categories to Body
Body
{
    Interaction
    {
        None = 0,
        Lockable = 2,
        Damageable = 4
    }
    
    InteractionLockable
    {
        UnlockableWithKey = 2,
        UnlockableWithBash = 4,
        ...
    }
    
    // by defualt has no interaction options
    prepareInteractionTree(packet)
    {
    }
}

// For a subclass that needs to use these
Chest : Structure
{
    // Add types
    void load(...)
    {
        // Add categories
        interaction = Interaction::Lockable;
        interactionLockable = UnlockableWithKey | UnlockableWithBash;
    }
    
    // Has a few options
    {
        if(schema.isLocked)
        {
            // Emulate the hierarchy tree in the packet
            packet << 1;
            packet << Interaction::Lockable;
            packet << 2;
            packet << InteractionLockable::UnlockableWithKey;
            packet << InteractionLockable::UnlockableWithBash;
        }
    }
}


// Client side the interaciton menu can recursively build the submenu from the packet
InteractionMenu
{
    Labels;
    InteractionMenu subMenus;
    
    buildFromInteractionOptions(Interaction option)
    {
        if(option.child.size() > 0)
        {
            // Build click label
            Labels[] = new Label(option::getTitle(option.Type);
            
            // Build a submenu
            foreach (option.child as childOption)
            {
                // Build Submenu
                subMenus[] = new InteractionMenu();
                subMenus.last().buildFromInteractionOptions(childOption);
                
                // When the label is clicked show the submenu of options
                labels.last.onClick = (){ submenus.last.show(); }
            }
        }
        else
        {
            // Leaf option so its on click fires the client side logic for interaction option
            Labels[] = new Label(Interaction::getTitle(option.Type);
            Labels.last.onClick = (){ option.onActivate(); };
        }
    }
}

// Add our static titles and client side packet stuff
Something
{
    public static onInteractionChose(Interaction enum)
    {
        
    }

    public static getBaseTitle(Interaction enum)
    {
    }
}






















-------------------------- SIMPLE ------------------------------------


// CLIENTSIDE USAGE IF INTERACTIONS
InteractionMenu
{
    Labels;
    InteractionMenu subMenus;
    
    buildFromInteractionOptions(Interaction option)
    {
        if(option.child.size() > 0)
        {
            // Build click label
            Labels[] = new Label(option::getTitle(option.Type);
            
            // Build a submenu
            foreach (option.child as childOption)
            {
                // Build Submenu
                subMenus[] = new InteractionMenu();
                subMenus.last().buildFromInteractionOptions(childOption);
                
                // When the label is clicked show the submenu of options
                labels.last.onClick = (){ submenus.last.show(); }
            }
        }
        else
        {
            // Leaf option so its on click fires the client side logic for interaction option
            Labels[] = new Label(Interaction::getTitle(option.Type);
            Labels.last.onClick = (){ option.onActivate(); };
        }
    }
}



// SERVERSIDE USAGE OF INTERACTIONS
ObjectFactory
{
    create(ObjectType o)
    {
        switch(o)
        {
            // ...
            case ObjectType::WoodenChest:
            {
                // return a new object that is UnlocakableWithKey, UnlockableWithPick, UnlockableWithBash
                
                i new InteractableObject();
                i.interactableBase = Interaction::BaseType::Lockable;
                i.interactableLockable = Interaction::Lockable::UnlockableWithKey | Interaction::Lockable::UnlockableWithBash;
                applyInteractableLgic(i);
                
            }
        }
    }
    
    applyInteractbleLogic(InteractableObject i)
    {
        if(bit::contains( i.interactableLockable, Interaction::Lockable::UnlockableWithKey )
            i.onActivates[Interaction::Type::UnlockableWithKey] = UnlockableWithKey::onActivate;
            
        if(bit::contains( i.interactableLockable, Interaction::Lockable::UnlockableWithBash )+
            i.onActivates[Interaction::Type::UnlockableWithBash] = UnlockableWithBash::onActivate;
    }
}



// SINGLE INTERACTION IMPLEMENTATION EXAMPLE

// 1. Add Class for Server and Client logic
class UnlockableWithBash : Lockable
{
    UnlockableWithBash()
    {
        onActivateClientSide = RequestUnlockWithBash();
    }
    
    UnlockWithBash(InteractableObject interactor)
    {
        if(interactor->hasBashable())
        {
            if(interactor->bash(this))
            {
                locked = false
            }
        }
    }
    
    RequestUnlockWithBash()
    {
        state->serverReqest(
            function(clientPacket) prepare
            {
                clientPacket << this.bodyId;
            },
            function (serverPacket) onComplete
            {
                serverPacket >> unlocked;
                if(unlocked)
                {
                    serverRequest( // ... getLootInventory );
                }
            }
        );
    }
}

// 2. Update Title
InteractableObject
{
    

    public static getTitle(InteractableEnum e)
    {   
        switch(e)
        {
            ...
            case UnlockableWithBash:
                return "Unlock with Bash";
        }
    }
    
}

Interaction
{
    Interaction parent;
    Vector<Interaction> children;
}


























-------------------------------- OLD -----------------------------------------------

INTERACTION TREE:
- When interacting with objects, they need to produce a serious of interaction choices
- Each interaction choice may have subchoices or may produce an action
- Example of opening a locked container:
    - Click on Locked Container
        - Unlock
            - Unlock with Key (if has key)
            - Attempt unlock with Lockpick (if has lockpick)
            - Attempt to Bash
        - Destroy
            - Shoot (if has gun)
            - Burn (if has fire)
        - Leave
    - Click on Unlocked Container
        - Open
        - Lock
            - Lock with Key (if has key)
            - Attempt Lock with Lockpick (id has lockpick)
        - Destroy
            - Shoot (if has gun)
            - Burn (if has fire)
        - Leave
- The example shows that varying types of interacteable object may have the same choices
- The example also shows that certain interactions have Requirements to be able to interact (see mission system)
- An action opens the Interaction Tree
- An action is produced from the Interaction Tree
- Each leaf node of the interaction tree must run a lambda function from the interactor and interactee
    Routine: onActivate(Character interactor, Body interactee)


IMPLEMENTATION:
Interactable
{
    Interactable(tree)
    {
        type = InteractionType::Root;
        parent = null;
        tree[InteractionType::Root] = this;
    }

    Interactable parent;
    map<InteractionType, Interactable> tree
    InteractionType type;
    function<(Character)> onSelect;
    
    enum InteractionType
    {
        Root,
        Lockable,
        UnlockableKeyable,
        UnlockableBashable,
    }
    
    virtual void activate(Character c)
    {
    }
}

Lockable : Interactable
{
    Lockable(tree)
        : Interactable(tree)
    {
        tree[InteractionType::Root].tree[InteractionType::Lockable] = this;
    }

    locked = true;
}

UnlockableKeyable : Lockable
{
    UnlockableKeyable(tree)
        : Lockable(tree)
    {
        tree[InteractionType::Root].tree[InteractionType::Lockable].tree[InteractionType::UnlockableKeyable] = this;
        onSelect = std::bind(&UnlockableKeyable::UnlockWithKey, this, std::placeholders::__1, std::placeholders::__2);
    }

    
    UnlockWithKey(Character c)
    {
        Key k = c.inventory.find(ItemType::Key);
        if(k)
        {
            locked = false;
        }
    }
    
    // CLIENT SIDE
    PrepareClientSideUnlockWithKey(LevelClient l, Character c)
    {
        Command cmd;
        cmd.type = Command::Type::UnlockWithKey;
        cmd.pack = [t] (sf::Packet &packet) {
            // Switch around to work with Tiles if need be
            packet << sf::Uint32(c->fixedState.id);
            packet << sf::Uint32(this->fixedState.id);
        };
		l->state->commandQueue.push_back(cmd);
    }
    
    HandleUnlockWithKey(packet)
    {
        // Unpack data
        // Locate target
        // Locate character
        // Check if legal action
        // Call defined operation
        target.UnlockWithKey(Character);
    }
}

UnlockableBas _back(cmd);
    }
    
    HandleUnlockWithBash(packet)
    {
        // Unpack data
        // Locate target
        // Locate character
        // Check if legal action
        // Call defined operation
        target.UnlockWithKey(Character);
    }
}

Chest : UnlockableKeyable, UnlockableBashable
{
    Chest()
        : UnlockableKeyable, UnlockableBashable
    {
    }
}


----------------------------

LevelClient.onClick(Character clicker, Tile clickedTile)
{
    Interactable i = clickedTile.getInteractable()
    if(i)
    {
        state.InteractionMenu.showInteractionOptions(clicker, clickedTile, i, 0);
    }
}

InteractionMenu.showInteractionOptions(Character c, Tile t, Interactable i, int depth)
{
    // Render the interaction type
    Render(i.Type, depth);
    InteractionY++;
    
    // Display nested list of options down to leafs
    if(i.tree.size() > 0)
    {
        foreach i.tree as key => value
        {
            if(value.tree.size() > 0)
            {
                showInteractionOptions(c, t, value, depth + 1);
            }
        }
    }
    else
    {
        // If this is is a leaf, register its selection function
        Render(i.Type, depth, [c, i] (Character c) {
            i.onSelect(c);
        });
    }
}










