Possible titles:
- Rogue Zombie
- ZRL


--------------------
RZ Bugs

Body's are LevelRunnable but if we delete one it will screw up references in the parent tile
- Tiles point to structures, doors or characters on them, deleting them needs to remove references
- Or protect against deleting them somehow*

Hunters firing after dead
- Ive seen flare visualization after they are killed
- On closer look it might be some left over from a grenade flair
- As if the grenade lighting is moving slightly past the Update ratio and rolling over?

Fat gap under Loot Interaction popup
- Only looks weird under singular loot option (like looting a dead guy)

Rename Node -> AstarNode

Dead enemies can block doors and tunnels, need a way to traverse without them


--------------------
RZ Features

Need much better AI for Hunters
- They should make chase - If they encounter the player and the player breaks LoS, they should go to the player's last seen location

Items should have stat effects and perhaps magical (lambda) effects
- Maybe rarity (green/blue/purple/orange)?
- Better stat details in the window

Procedural levels
- https://www.rockpapershotgun.com/2015/07/28/how-do-roguelikes-generate-levels/
- http://www.gridsagegames.com/blog/2014/06/procedural-map-generation/
- http://donjon.bin.sh/d20/dungeon/
- http://donjon.bin.sh/code/dungeon/
- http://donjon.bin.sh/code/dungeon/dungeon.pl
- TO DO:
	- Floodfill entrance landing pads
	- Lights, enemies, structures, items
	- Given hallways we must figure out how to move over and beyond dead bodies

Better stair tiles
- For stairs up we should just make nonblocking sprites special for those tiles
- Otherwise they look like poo

Map
- Shows revealed areas
- Possibly a minimap
- Try without isometric, rendering similar to our XoGeni game

Ability to move with WASD, even in combat
- Display combat movements remaining in HUD

Ability to Trash items in the inventory

Flavor console line

Upgrade SFML to v2.4

Non networked single Player
- Look at possibility of local semaphor packet sending

--------------------
RZ Potential issues



--------------------
RZ Scope

I've decided to go the route of level gen for a single tower, took a few days to get something working but its a good foundation

You play has human characters in the apocalypse
You must ascend a tower to the helicopter on top
The tower is dangerous, robots, hunters, zombies, its ground zero perhaps
Level one is ground floor prefab, it is the only place that players can join for partying
Level two until top are procedurally generated with themes such as: medical, robotics, offices, labs
Level top is a prefab of a boss fight and the escape
Levels can have a prefab thematic elements and rooms to carry plotline and ensure level exploration


--------------------
Threaded Sockets

The client has a TcpSocket
The server has a TcpListener

Both are parented by Socket

Client uses:
	socket.connect
	socket.setBlocking
	socket.receive
	socket.send

Server uses:
	listenerSocket.setBlocking
	listenerSocket.listen
	listenerSocket.close
	listenerSocket.accept
	client->socket.send
	client->socket.receive
	client->socket.disconnect

	
Rough process
1. Server starts listening
2. Client connects
3. Server accepts
4. Server close
5. Server sends
6. Client receives
7. Client sends
8. Server receives
9. Client disconnect
10. Server listens


A server has an IP address and listens to a specific port
A client connects to that IP address and port
When the socket is accepted data is sent and received


In local hosting the server is running in a thread separated from the client.
When the server needs to send data it could MUTEX copy the packet into a queue of packets to be sent
A bool is set that packets are pending
The client socket would poll the bool until it was set, it would then MUTEX the queue and pop off a packet

The server has a list of client sockets and could copy packets to their specific instance queues when packets are sent (in this case, one client)

To implement we would need to wrap the TcpSocket and TcpListener and sf::Socket classes with bit versions
Then we would need two bit versions, one that was the SFML network implementation and two that was the threaded queue version

Phase 1:
- Plan out all ^^used methods for both SFML networked and BIT threaded versions
- Create BIT wrappers that used SFML networking
- Create BIT wrappers that used threads


