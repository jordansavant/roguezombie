
Server
{
	RequestResponse
	{
		GetAvailableInteractionsForBodyOnTile(clientId, tileId)
		
		ProcessInteractionForBodyOnTile(clientId, tileId, interactionType)
		
		TransferItemFromCounterpartyToParty(clientId, itemId)
		
		TransferItemFromPartyToCounterparty(clientId, itemId)
		
		CloseItemTransaction(clientId)
		
		EquipItemFromInventoryToSlot(clientId, slot, itemId)
		
		UnequipItemFromSlotToInventory(clientId, slot)
	}
	
	Event
	{
		MissionAssigned
		
		MissionCompleted
		
		ItemAddedToInventory
		
		ItemRemovedFromInventory
		
		CombatTurnStarted
		
		CombatTurnEnded
		
		CombatDecisionStarted
		
		CombatDecisionEnded
		
		CharacterAttacksPlayer
		
		CharacterMissesPlayer
		
		PlayerAttacksCharacter
		
		PlayerMissesCharacter
	}
}



API	Requests

	// Takes a tile ID and an Interaction enum and if the tile has a body, tells that body
	// to handle the interaction
	// See: Interactions
	RunBodyInteraction(tileId, interactionType);
	
		Body Interactions:
			
			OpenInventory
			
			CloseInventory
			
			Dialog
			
		Chest Interactions:
		
			UnlockWithKey
			
			UnlockWithLockpick
			
			UnlockWithBash
			
			LockWithKey
			
			UnlockWithBash
			
	
	// Takes a tile and builds the interaction option
	// as a response for available options
	// If there is no tile, or no options the response is false
	GetInteractionOptions(tileId);
	
	GetInteractionOptionsForBodyOnTile(tileId, responsePacket)
	
	// Prereq: needs a dialog transaction between the player and a character
	// Takes the dialog and lets the other party handle it
	// Response is the new dialog tree
	DialogResponse(dialog);
	
	// Prereq: requires an inventory transaction
	// Finds the item in the counterparty inventory
	// If it is found it removes it and and moves it to the player
	// If it is not found or there is no transaction it returns false
	TransferItem(itemId);
	
	// Prereq: requires an inventory transaction
	// If the player character has an counterparty it nullifies the transaction
	// Return is constantly void
	CloseInventory(itemId)
	
	// Takes an item id, and if found in the inventory attempts to equip it in the slot
	// If the slot is not available or if the item does not match the criteria it fails
	// Return is constantly void
	EquipItem(slot, itemId)
	
	// Takes a slot and removes any item from it placing it in the inventory
	// If no slotted item exists it is ignored
	// Return is constantly void
	UnequipItem(slot)
	
API Events

	MissionAssigned
	
	MissionCompleted
	
	ItemAdded
	
	ItemRemoved
	
	CombatTurnStarted
	
	CombatTurnEnded
	
	CombatDecisionStarted
	
	CombatDecisionEnded
	
	CharacterAttacksPlayer
	
	CharacterMissesPlayer
	
	PlayerAttacksCharacter
	
	PlayerMissesCharacter
	

Server Update


Client Update
	
	